#+title: Get Programming With Haskell

** Unit3 - Programming in types
*** chapter 17 Semigroups and Monoids

1.Monoid requires me to specify an identity element.

** Unit5 - Working with type in a context

1. Use Functor, when I have (a -> b) in context.
2. Use applicative, when I have (f a -> b) in context.
3. Use applicative, for Maybe (Int -> Double).
4. Use Monad, when (a -> f b) is in context.

*** chapter27 - The Functor typeclass 

1. Transform the types of values inside a Maybe 
2. Types of kind * -> * are parameterized types that take just one type parameter.
3. Member of Functor include List, Map, Maybe and IO.
4. [Int], Maybe Int, and IO Int can all use the same core functions.
5. Functor’s <$> provides a common interface to apply any function to a
value in a context.
6. fmap type signature
   #+begin_src haskell
   fmap :: Functor f => (a -> b) -> f a -> f b
   #+end_src

*** chapter28 - A peek at the applicative typeclass

1. applicative type signature. <*> operator (pro-
nounced app)
   #+begin_src haskell
   (<*>) :: Applicative f => f (a -> b) -> f a -> f b
   #+end_src
   
2. limitation of Functor's fmap is that it only works on single-argument functions.
3. Using Functor's <$> operator for partial application in a context
   #+begin_src haskell
   maybeInc = (+) <$> Just 1
   #+end_src
4. <*> (app operator)   
5. <$> and <*> to chain together any number of arguments.

*** chapter29 - List as context: A deeper look at the applicative typeclass

1. applicative typeclass
   #+begin_src
   class Functor f => Applicative f where
      (<*>) :: f (a -> b) -> f a -> f b
      pure :: a -> f a
   #+end_src
2. The pure method has a way to take an ordinary type and put it in a context.
3. In nondeterministic computing, we are computing multiple possibilities all at once.
4. A list as a container is a sequence of values that can hold any type. Each item in
the list points to the next one or to the empty list.
5. A list as a context represents a set of possibilities. Think of a list as a context as
being a single variable that can contain many possible values.

*** chapter30 - Introducing the Monad typeclass

1. Functor allows me to change individual values in a context.
2. Applicative increases my power by enabling me to use partial application in a context.
3. monad typeclass
   #+begin_src haskell
   class Applicative m => Monad (m :: * -> *) where
      (>>=) :: m a -> (a -> m b) -> m b
      (>>) :: m a -> m b -> m b
      return :: a -> m a
      fail :: String -> m a
   #+end_src
4. The Monad type class predates the Applicative type class, so the return method exists for legacy reasons.
5. Unlike Maybe, we can’t trivially use pattern matching to access values inside the IO context.

*** chapter31 - Making Monads easier with do-notation

1. (>>) allows me to perform an IO action and chain it with another action, ignoring
its value.
2. (>>=) allows me to perform an IO action and then hand off the return value of that
function to another waiting for a value.
3. (\x -> return (func x)) allows me to take an ordinary function and have it work in
the context of IO.
4. Do-notation is syntactic sugar for using >>, >>=, and (\x -> return
(func x)).